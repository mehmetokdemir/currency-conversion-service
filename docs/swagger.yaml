basePath: /
definitions:
  dto.LoginRequest:
    properties:
      password:
        example: TopSecret!!!
        type: string
        x-order: "2"
      username:
        example: okdemir
        type: string
        x-order: "1"
    required:
    - password
    - username
    type: object
  dto.RegisterRequest:
    properties:
      email:
        example: john@gmail.com
        type: string
        x-order: "2"
      password:
        example: TopSecret!!!
        type: string
        x-order: "3"
      username:
        example: john
        type: string
        x-order: "1"
    required:
    - email
    - password
    - username
    type: object
  dto.RegisterResponse:
    properties:
      email:
        example: john@gmail.com
        type: string
        x-order: "2"
      username:
        example: john
        type: string
        x-order: "1"
    type: object
  helper.Response:
    properties:
      data:
        x-order: "5"
      error:
        $ref: '#/definitions/helper.ResponseError'
        x-order: "4"
      status_code:
        example: 200
        type: integer
        x-order: "2"
      success:
        example: true
        type: boolean
        x-order: "1"
      warnings:
        items:
          $ref: '#/definitions/helper.ResponseWarning'
        type: array
        x-order: "3"
    type: object
  helper.ResponseError:
    properties:
      detail:
        type: string
      message:
        type: string
    type: object
  helper.ResponseWarning:
    properties:
      code:
        example: invalid
        type: string
      field:
        example: password
        type: string
    type: object
info:
  contact: {}
  description: Currency Conversion Service.
  title: Currency Conversion Service
  version: "1.0"
paths:
  /user/login:
    post:
      consumes:
      - application/json
      description: User Login
      parameters:
      - description: body params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.Response'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Auth User
      tags:
      - User
  /user/register:
    post:
      consumes:
      - application/json
      description: Create a user
      parameters:
      - description: body params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.RegisterResponse'
              type: object
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Create User
      tags:
      - User
swagger: "2.0"
