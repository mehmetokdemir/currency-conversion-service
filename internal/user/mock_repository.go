// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mehmetokdemir/currency-conversion-service/internal/user (interfaces: IUserRepository)

// Package user is a generated GoMock package.
package user

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIUserRepository is a mock of IUserRepository interface.
type MockIUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUserRepositoryMockRecorder
}

// MockIUserRepositoryMockRecorder is the mock recorder for MockIUserRepository.
type MockIUserRepositoryMockRecorder struct {
	mock *MockIUserRepository
}

// NewMockIUserRepository creates a new mock instance.
func NewMockIUserRepository(ctrl *gomock.Controller) *MockIUserRepository {
	mock := &MockIUserRepository{ctrl: ctrl}
	mock.recorder = &MockIUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserRepository) EXPECT() *MockIUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockIUserRepository) CreateUser(arg0 User) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIUserRepositoryMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIUserRepository)(nil).CreateUser), arg0)
}

// GetUserByUsername mocks base method.
func (m *MockIUserRepository) GetUserByUsername(arg0 string) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", arg0)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockIUserRepositoryMockRecorder) GetUserByUsername(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockIUserRepository)(nil).GetUserByUsername), arg0)
}

// IsUserExistWithSameEmail mocks base method.
func (m *MockIUserRepository) IsUserExistWithSameEmail(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserExistWithSameEmail", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUserExistWithSameEmail indicates an expected call of IsUserExistWithSameEmail.
func (mr *MockIUserRepositoryMockRecorder) IsUserExistWithSameEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserExistWithSameEmail", reflect.TypeOf((*MockIUserRepository)(nil).IsUserExistWithSameEmail), arg0)
}

// IsUserExistWithSameUsername mocks base method.
func (m *MockIUserRepository) IsUserExistWithSameUsername(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserExistWithSameUsername", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUserExistWithSameUsername indicates an expected call of IsUserExistWithSameUsername.
func (mr *MockIUserRepositoryMockRecorder) IsUserExistWithSameUsername(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserExistWithSameUsername", reflect.TypeOf((*MockIUserRepository)(nil).IsUserExistWithSameUsername), arg0)
}

// Migration mocks base method.
func (m *MockIUserRepository) Migration() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migration")
	ret0, _ := ret[0].(error)
	return ret0
}

// Migration indicates an expected call of Migration.
func (mr *MockIUserRepositoryMockRecorder) Migration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migration", reflect.TypeOf((*MockIUserRepository)(nil).Migration))
}
