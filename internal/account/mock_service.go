// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mehmetokdemir/currency-conversion-service/internal/account (interfaces: IAccountService)

// Package account is a generated GoMock package.
package account

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIAccountService is a mock of IAccountService interface.
type MockIAccountService struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountServiceMockRecorder
}

// MockIAccountServiceMockRecorder is the mock recorder for MockIAccountService.
type MockIAccountServiceMockRecorder struct {
	mock *MockIAccountService
}

// NewMockIAccountService creates a new mock instance.
func NewMockIAccountService(ctrl *gomock.Controller) *MockIAccountService {
	mock := &MockIAccountService{ctrl: ctrl}
	mock.recorder = &MockIAccountServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAccountService) EXPECT() *MockIAccountServiceMockRecorder {
	return m.recorder
}

// CreateUserAccount mocks base method.
func (m *MockIAccountService) CreateUserAccount(arg0 uint, arg1 string, arg2 bool) (*Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserAccount", arg0, arg1, arg2)
	ret0, _ := ret[0].(*Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserAccount indicates an expected call of CreateUserAccount.
func (mr *MockIAccountServiceMockRecorder) CreateUserAccount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserAccount", reflect.TypeOf((*MockIAccountService)(nil).CreateUserAccount), arg0, arg1, arg2)
}

// GetUserBalanceOnGivenCurrencyAccount mocks base method.
func (m *MockIAccountService) GetUserBalanceOnGivenCurrencyAccount(arg0 uint, arg1 string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalanceOnGivenCurrencyAccount", arg0, arg1)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalanceOnGivenCurrencyAccount indicates an expected call of GetUserBalanceOnGivenCurrencyAccount.
func (mr *MockIAccountServiceMockRecorder) GetUserBalanceOnGivenCurrencyAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalanceOnGivenCurrencyAccount", reflect.TypeOf((*MockIAccountService)(nil).GetUserBalanceOnGivenCurrencyAccount), arg0, arg1)
}

// IsUserHasAccountOnGivenCurrency mocks base method.
func (m *MockIAccountService) IsUserHasAccountOnGivenCurrency(arg0 uint, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserHasAccountOnGivenCurrency", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUserHasAccountOnGivenCurrency indicates an expected call of IsUserHasAccountOnGivenCurrency.
func (mr *MockIAccountServiceMockRecorder) IsUserHasAccountOnGivenCurrency(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserHasAccountOnGivenCurrency", reflect.TypeOf((*MockIAccountService)(nil).IsUserHasAccountOnGivenCurrency), arg0, arg1)
}

// ListUserAccounts mocks base method.
func (m *MockIAccountService) ListUserAccounts(arg0 uint) ([]WalletAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserAccounts", arg0)
	ret0, _ := ret[0].([]WalletAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserAccounts indicates an expected call of ListUserAccounts.
func (mr *MockIAccountServiceMockRecorder) ListUserAccounts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserAccounts", reflect.TypeOf((*MockIAccountService)(nil).ListUserAccounts), arg0)
}

// UpdateUserBalanceOnGivenCurrencyAccount mocks base method.
func (m *MockIAccountService) UpdateUserBalanceOnGivenCurrencyAccount(arg0 uint, arg1 string, arg2 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserBalanceOnGivenCurrencyAccount", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserBalanceOnGivenCurrencyAccount indicates an expected call of UpdateUserBalanceOnGivenCurrencyAccount.
func (mr *MockIAccountServiceMockRecorder) UpdateUserBalanceOnGivenCurrencyAccount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserBalanceOnGivenCurrencyAccount", reflect.TypeOf((*MockIAccountService)(nil).UpdateUserBalanceOnGivenCurrencyAccount), arg0, arg1, arg2)
}
